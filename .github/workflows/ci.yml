---
name: ci workflow
"on": push

env:
  ANSIBLE_ROLES_PATH: "..:tests/roles"

jobs:
  test-job:
    name: test the role
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3

    - name: print versions
      run: |
        set -x
        uname -a
        id
        python3 --version
        pip3 --version
        ansible --version
        docker version

    - name: prepare tests
      run: |
        set -x
        sudo apt install sshpass
        sshpass -V
        pip3 install -r requirements.txt
        pip3 install ansible
        ansible --version
        ansible-galaxy install -p tests/roles -r requirements.yml
        ansible-galaxy install -p tests/roles -r requirements-test.yml

    - name: syntax check
      run: ansible-playbook tests/test.yml -i tests/inventory --syntax-check

    - name: prepare sshd containers
      run: |
        set -x
        docker pull hermsi/alpine-sshd
        docker pull centos:7

        # Start a sshd container for testing
        # - listen on localhost:4848
        # - enable root login
        # - set root password to 123456
        docker run -p 4848:22 --name alpine-sshd --hostname alpine-sshd -d -e ROOT_KEYPAIR_LOGIN_ENABLED=true -e ROOT_PASSWORD=123456 hermsi/alpine-sshd
        docker exec -i alpine-sshd sh -c 'apk update'
        ssh-keygen -f ~/.ssh/known_hosts -R [localhost]:4848 || true

        # Start a centos 7 sshd container for testing
        # - listen on localhost:5848
        # - enable root login
        # - root login via pubkey
        docker run -p 5848:22 --name centos-sshd --hostname centos-sshd -d centos:7 sh -c 'yum --assumeyes install openssh-server tcsh && echo "PermitRootLogin yes" >> /etc/ssh/sshd_config && ssh-keygen -f /etc/ssh/ssh_host_rsa_key -N "" -t rsa && ssh-keygen -f /etc/ssh/ssh_host_dsa_key -N "" -t dsa && mkdir -p /var/run/sshd && exec /usr/sbin/sshd -D'
        ssh-keygen -f ~/.ssh/known_hosts -R [localhost]:5848 || true
        printf "123456\n123456" | docker exec -i centos-sshd passwd

        # Create ssh askpass shell
        printf '#!/bin/sh\necho 123456\n' >ps.sh
        chmod +x ps.sh

    - name: TEST 1 - no key
      run: |
        set -x
        true && ! ansible-playbook tests/test.yml -i tests/inventory
        true && ! ansible-playbook tests/test.yml -i tests/inventory-pass

    - name: TEST 2 - with a uncrypted key pair
      run: |
        set -x
        find /home/travis/.ansible/cp -maxdepth 1 -a ! -type d | xargs -rn1 -I {} ssh -O exit -o Port=4848 -o User=root -o ControlPath={} -tt 127.0.0.1 || true
        ssh-keygen -N '' -f ~/.ssh/id_rsa
        true && ! ansible-playbook tests/test.yml -i tests/inventory
        ansible-playbook tests/test.yml -i tests/inventory-pass
        ansible-playbook tests/test.yml -i tests/inventory

    - name: TEST 3 - with a uncrypted private key
      run: |
        set -x
        find /home/travis/.ansible/cp -maxdepth 1 -a ! -type d | xargs -rn1 -I {} ssh -O exit -o Port=4848 -o User=root -o ControlPath={} -tt 127.0.0.1 || true
        rm ~/.ssh/id_rsa ~/.ssh/id_rsa.pub && ssh-keygen -N '' -f ~/.ssh/id_rsa && rm ~/.ssh/id_rsa.pub
        true && ! ansible-playbook tests/test.yml -i tests/inventory
        ansible-playbook tests/test.yml -i tests/inventory-pass
        ansible-playbook tests/test.yml -i tests/inventory

    - name: TEST 4 - install keys via control persist path
      run: |
        set -x
        rm ~/.ssh/id_rsa && ssh-keygen -N '' -f ~/.ssh/id_rsa
        ansible-playbook tests/test.yml -i tests/inventory

    - name: TEST 5 - with a crypted key pair
      run: |
        set -x
        find /home/travis/.ansible/cp -maxdepth 1 -a ! -type d | xargs -rn1 -I {} ssh -O exit -o Port=4848 -o User=root -o ControlPath={} -tt 127.0.0.1 || true
        docker exec -i alpine-sshd sh -c 'rm ~/.ssh -rf' && ssh-keygen -p -P '' -N '123456' -f ~/.ssh/id_rsa
        true && ! ansible-playbook tests/test.yml -i tests/inventory
        true && ! ansible-playbook tests/test.yml -i tests/inventory-pass

    - name: TEST 6 - with a crypted key pair in ssh-agent
      run: |
        set -x
        eval `ssh-agent`
        echo | DISPLAY=:0 SSH_ASKPASS="$PWD/ps.sh" ssh-add
        ansible-playbook tests/test.yml -i tests/inventory
        eval `ssh-agent -k`

    - name: TEST 7 - with --become
      run: |
        set -x
        find /home/travis/.ansible/cp -maxdepth 1 -a ! -type d | xargs -rn1 -I {} ssh -O exit -o Port=4848 -o User=root -o ControlPath={} -tt 127.0.0.1 || true
        docker exec -i alpine-sshd sh -c 'rm ~/.ssh -rf'
        eval `ssh-agent`
        echo | DISPLAY=:0 SSH_ASKPASS="$PWD/ps.sh" ssh-add
        ansible-playbook tests/test.yml -i tests/inventory-pass --become
        test "$(docker exec alpine-sshd sh -c 'cat $HOME/.ssh/authorized_keys' | cut -d ' ' -f 1,2 | uniq | md5sum)" = "$(cat ~/.ssh/id_rsa.pub | cut -d ' ' -f 1,2 | md5sum)"
        eval `ssh-agent -k`

    - name: TEST 8 - shell type is fish
      run: |
        set -x
        find /home/travis/.ansible/cp -maxdepth 1 -a ! -type d | xargs -rn1 -I {} ssh -O exit -o Port=4848 -o User=root -o ControlPath={} -tt 127.0.0.1 || true
        docker exec -i alpine-sshd sh -c 'rm ~/.ssh -rf'
        docker exec -i alpine-sshd sh -c 'apk add fish bc'
        eval `ssh-agent`
        echo | DISPLAY=:0 SSH_ASKPASS="$PWD/ps.sh" ssh-add
        ansible-playbook tests/test.yml -i tests/inventory-fish
        test "$(docker exec alpine-sshd sh -c 'cat $HOME/.ssh/authorized_keys' | cut -d ' ' -f 1,2 | uniq | md5sum)" = "$(cat ~/.ssh/id_rsa.pub | cut -d ' ' -f 1,2 | md5sum)"
        eval `ssh-agent -k`

    - name: TEST 9 - centos with csh shell
      run: |
        set -x
        eval `ssh-agent`
        echo | DISPLAY=:0 SSH_ASKPASS="$PWD/ps.sh" ssh-add
        ansible-playbook tests/test.yml -i tests/inventory-csh
        test "$(docker exec centos-sshd sh -xc 'cat $HOME/.ssh/authorized_keys' | cut -d ' ' -f 1,2 | uniq | md5sum)" = "$(cat ~/.ssh/id_rsa.pub | cut -d ' ' -f 1,2 | md5sum)"
        eval `ssh-agent -k`

  lint-job:
    name: lint codes
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
    - name: prepare lint
      run: |
        pip3 install -r requirements.txt
        pip3 install ansible-lint
        ansible-lint --version
        ansible-galaxy install -p tests/roles -r requirements.yml
        ansible-galaxy install -p tests/roles -r requirements-test.yml
    - name: lint
      run: ansible-lint --show-relpath --exclude tests/roles

  deploy-job:
    name: deploy the role on tag
    runs-on: ubuntu-22.04
    needs: [test-job, lint-job]
    if: github.ref_type == 'tag'
    steps:
    - uses: actions/checkout@v3
    - name: publish the role to Galaxy
      uses: robertdebock/galaxy-action@1.2.1
      with:
        galaxy_api_key: ${{ secrets.GALAXY_API_KEY }}
        git_branch: ${{ github.ref_name }}
