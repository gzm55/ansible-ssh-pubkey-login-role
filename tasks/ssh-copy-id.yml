---
# Basic method is the same as ssh-copy-id:
#   - Try ssh login only by pubkey
#   - If login fail, copy all known public keys to the hosts via raw module

- name: override ssh ansible_ssh_executable
  run_once: True
  when: inventory_hostname == ansible_play_hosts_all[0]
  connection: ssh
  vars:
  - ansible_connection: ssh
  - ansible_ssh_executable: "{{ omit }}"
  assert:
    that:
    - "ansible_connection == 'ssh'"
    - "ansible_ssh_executable == omit"

- name: get ssh options
  register: ssh_options
  connection: ssh
  raw: exit
  vars:
  - ansible_become: False
  - ansible_connection: ssh
  - ansible_ssh_executable: "{{ role_path }}/files/dump-ssh-opts.sh"
  failed_when: ssh_options.stderr
  changed_when: False

- name: main tasks
  vars:
  - ansible_become: False
  - ansible_become_user: >-
      {{ ansible_user
         | d(ansible_ssh_user)
         | d(lookup('config', 'DEFAULT_REMOTE_USER'))
         | d(lookup('id', 'euname'), True) }}
  - specify_ssh_private_key: >-
      {{ ssh_options.stdout_lines
         | select('match', 'IdentityFile=.*')
         | list
         or ssh_options.stdout_lines
            | select('match', '-[a-zA-Z0-9]*i')
            | list
      }}
  - ssh_prepend_args: >-
      {{ specify_ssh_private_key
         | ternary('-o IdentitiesOnly=yes -o KbdInteractiveAuthentication=no',
                   '-o KbdInteractiveAuthentication=no')
      }}
      -o PreferredAuthentications=publickey
      -o PasswordAuthentication=no
      -o ChallengeResponseAuthentication=no
      -o ControlPath=none
  block:
  - name: ssh private keys should be alread in agent or without passwords
    delegate_to: localhost
    register: check_login_pubkey
    expect:
      command: >-
         {{ ansible_ssh_executable | quote }}
         {{ ssh_prepend_args }}
         {{ ssh_options.stdout_lines | map('quote') | join(' ') }}
      responses:
        '(?i)Enter passphrase for': ''
    failed_when: >-
      check_login_pubkey.stdout is not defined
      or check_login_pubkey.stdout is search('Enter passphrase for')
      or (check_login_pubkey is failed and check_login_pubkey.stdout is not search('Permission denied .*publickey'))
    changed_when: False

  - name: when login fail
    when: check_login_pubkey.rc != 0
    block:
    - name: list identity files
      delegate_to: localhost
      register: debug_identity_files
      raw: >-
           {{ ansible_ssh_executable | quote }}
           -o LogLevel=DEBUG1
           {{ ssh_prepend_args }}
           {{ ssh_options.stdout_lines | reject('match', '^-v+$') | map('quote') | join(' ') }} 2>&1
      failed_when: False
      changed_when: False

    ## skip *_sk keys, fido2 keys require pressing the button on the fido keys
    - name: install public keys
      register: public_key_installed
      vars:
      - need_install: "{{ debug_identity_files.stdout_lines is defined }}"
      - identity_pubkeys: >-
          {{ debug_identity_files.stdout_lines
             | d([])
             | select('match', '^debug1: identity file .*$')
             | map('regex_replace', '^debug1: identity file |(-cert)? type [^ ]+$', '')
             | reject('match', '^.*_sk$')
             | unique
             | select('exists')
             | map('regex_replace', '$', '.pub')
             | list }}
      - shell_exec: >-
          {{ (ansible_shell_type | d('sh') in ['sh', 'csh', 'fish'])
             | ternary(ansible_shell_executable, '/bin/sh')
          }}
      - shell_type: >-
          {{ ( [ansible_shell_type | d('')]
               | intersect(['sh', 'csh', 'fish'])
               | list
               | length == 1 )
             | ternary(ansible_shell_type, 'sh')
          }}
      - shell_backslash: >-
                         {% raw -%}\{%- endraw %}
      - shell_and:       "{{ (shell_type == 'fish') | ternary('; and',     '&&'        ) }}"
      - shell_or:        "{{ (shell_type == 'fish') | ternary('; or',      '||'        ) }}"
      - shell_exit:      "{{ (shell_type == 'csh')  | ternary('eval exit', 'exit'      ) }}"
      - shell_newline:   "{{ (shell_type == 'csh')  | ternary(';' + shell_backslash, '') }}"
      - raw_script: |-
          cd
          umask 077
          mkdir -p .ssh
          grep -F {{ item | quote }} .ssh/authorized_keys \
            {{ shell_and }} echo "Alread Installed" \
            {{ shell_and }} {{ shell_exit }} 0{{ shell_newline }}
          echo {{ item | quote }} >> .ssh/authorized_keys \
            {{ shell_or }} {{ shell_exit }} 1{{ shell_newline }}
          restorecon -F .ssh .ssh/authorized_keys{{ shell_newline }}
          exit 0
      loop: >-
        {{  ( query('lines',
                     (need_install and require_local_command['PATH='+lookup('env','PATH')|quote]['ssh-add'])
                     | ternary('ssh-add -L 2>/dev/null || true', ''))
              | reject('match', 'The agent has no identities.')
              | list
            + query('lines',
                     identity_pubkeys
                     | select('exists')
                     | map('quote')
                     | map('regex_replace', '^', 'cat ')
                     | join(';'))
            + query('lines',
                     (need_install and require_local_command['PATH='+lookup('env','PATH')|quote]['ssh-keygen'])
                     | ternary(identity_pubkeys
                               | reject('exists')
                               | map('regex_replace', '\.pub$', '')
                               | map('quote')
                               | map('regex_replace', '^', 'echo | DISPLAY=:0 SSH_ASKPASS={{ role_path | quote }}/fake.sh ssh-keygen -y -f ')
                               | map('regex_replace', '$', ' || true')
                               | join(';'),
                               ''))
            )
            | difference([''])
        }}
      raw: "{{ shell_exec | quote }} -c {{ raw_script | quote }}"
      changed_when:
      - public_key_installed.rc is defined
      - public_key_installed.rc == 0
      - public_key_installed.stdout is defined
      - public_key_installed.stdout is not search('Alread Installed')

    - name: at least one valid passphrase-less key installed (key types may be rejected by servers)
      delegate_to: localhost
      changed_when: False
      raw: >
        {{ ansible_ssh_executable | quote }}
        -o BatchMode=yes
        {{ ssh_prepend_args }}
        {{ ssh_options.stdout_lines | map('quote') | join(' ') }}
