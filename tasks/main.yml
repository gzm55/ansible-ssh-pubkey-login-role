---
# Basid method is the same as ssh-copyid:
#   - Try ssh login only by pubkey
#   - If login fail, copy all known keys to the hosts by raw module

- name: get ssh options
  register: ssh_options
  connection: ssh
  raw: exit
  vars:
  - ansible_ssh_executable: "{{ role_path }}/files/dump-ssh-opts.sh"
  failed_when: ssh_options.stderr != ''
  changed_when: False

- name: ssh private keys should be alread in agent or without passwords
  connection: local
  vars:
    # use local python searching from PATH
    ansible_python_interpreter: python
  register: check_login_pubkey
  expect:
    command: >
       {{ ansible_ssh_executable
          | d(local_ansible_config['ssh_connection/ssh_executable'])
          | d('ssh', True)
          | quote }}
       -o IdentitiesOnly=yes
       -o KbdInteractiveAuthentication=no
       -o PreferredAuthentications=publickey
       -o PasswordAuthentication=no
       -o ControlPath=none
       {{ ssh_options.stdout_lines | map('quote') | join(' ') }}
    responses:
      '(?i)Enter passphrase for key': ''
  failed_when: check_login_pubkey.stdout is not defined or check_login_pubkey.stdout | search('Enter passphrase for key')
  changed_when: False

- block:

  - name: list identity files
    connection: local
    register: debug_identity_files
    raw: >
         {{ ansible_ssh_executable
            | d(local_ansible_config['ssh_connection/ssh_executable'])
            | d('ssh', True)
            | quote }} \
         -v \
         -o IdentitiesOnly=yes \
         -o KbdInteractiveAuthentication=no \
         -o PreferredAuthentications=publickey \
         -o PasswordAuthentication=no \
         -o ControlPath=none \
         {{ ssh_options.stdout_lines | reject('match', '^-v+$') | map('quote') | join(' ') }} 2>&1
    failed_when: False
    changed_when: False

  - name: install public keys
    register: public_key_installed
    vars:
      need_install: "{{ debug_identity_files.stdout_lines is defined }}"
      identity_pubkeys: >
        {{ debug_identity_files.stdout_lines
           | d([])
           | select('match', '^debug1: identity file .*$')
           | map('regex_replace', '^debug1: identity file |(-cert)? type [^ ]+$', '')
           | unique
           | select('exists')
           | map('regex_replace', '$', '.pub') }}
    with_items: >
      {{  ( lookup('lines',
                   (need_install and require_local_command['PATH='+lookup('env','PATH')|quote]['ssh-add'])
                   | ternary('ssh-add -L || true', ''),
                   wanglist=True)
            | reject('match', 'The agent has no identities.')
            | list
          + lookup('lines',
                   identity_pubkeys
                   | select('exists')
                   | map('quote')
                   | map('regex_replace', '^', 'cat ')
                   | join(';'),
                   wantlist=True)
          + lookup('lines',
                   (need_install and require_local_command['PATH='+lookup('env','PATH')|quote]['ssh-keygen'])
                   | ternary(identity_pubkeys
                             | reject('exists')
                             | map('regex_replace', '\.pub$', '')
                             | map('quote')
                             | map('regex_replace', '^', 'ssh-keygen -y -f ')
                             | join(';'),
                             ''),
                   wantlist=True)
          )
          | unique
          | difference([''])
      }}
    raw: >
      cd;
      umask 077;
      mkdir -p .ssh;
      echo {{ item | quote }} >> .ssh/authorized_keys
      || exit 1;
      { command -v restorecon || which restorecon; } >/dev/null \
      && restorecon -F .ssh .ssh/authorized_keys;
      exit 0

  when: check_login_pubkey.rc != 0
