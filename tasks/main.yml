---
# Basid method is the same as ssh-copyid:
#   - Try ssh login only by pubkey
#   - If login fail, copy all known keys to the hosts by raw module

# TODO detect privite key password by expect module or expect command
- name: sshpass should detect custom prompt (-P)
  connection: local
  run_once: True
  register: sshpass_prompt_opt
  raw: sshpass -Px
  failed_when: sshpass_prompt_opt.stderr != ''
  changed_when: False

- name: get ssh options
  register: ssh_options
  connection: ssh
  raw: exit
  vars:
  - ansible_ssh_executable: "{{ role_path }}/files/dump-ssh-opts.sh"
  failed_when: ssh_options.stderr != ''
  changed_when: False

- name: ssh private keys should be alread in agent or without passwords
  connection: local
  register: check_login_pubkey
  raw: >
       sshpass
       -v -p ''
       -P 'Enter passphrase for key'
       {{ ansible_ssh_executable
          | d(local_ansible_config['ssh_connection/ssh_executable'])
          | d('ssh', True)
          | quote }}
       -o IdentitiesOnly=yes
       -o KbdInteractiveAuthentication=no
       -o PreferredAuthentications=publickey
       -o PasswordAuthentication=no
       -o ControlPath=none
       {{ ssh_options.stdout_lines | map('quote') | join(' ') }}
  failed_when: check_login_pubkey.stderr | d() | search('SSHPASS detected prompt. Sending password.')
  changed_when: False

- block:

  - name: list identity files
    connection: local
    register: debug_identity_files
    raw: >
         {{ ansible_ssh_executable
            | d(local_ansible_config['ssh_connection/ssh_executable'])
            | d('ssh', True))
            | quote }}
         -v
         -o IdentitiesOnly=yes
         -o KbdInteractiveAuthentication=no
         -o PreferredAuthentications=publickey
         -o PasswordAuthentication=no
         -o ControlPath=none
         {{ ssh_options.stdout_lines | reject('match', '^-v+$') | map('quote') | join(' ') }} 2>&1
    failed_when: False
    changed_when: False

  - name: install public keys
    register: public_key_installed
    with_lines: >
      {{ (debug_identity_files.stdout_lines is defined) | ternary('true', 'false') }} &&
      { { command -v ssh-add || which ssh-add; } >/dev/null && ssh-add -L
        {{ debug_identity_files.stdout_lines
           | d([])
           | select('match', '^debug1: identity file .*$')
           | map('regex_replace', '^debug1: identity file |(-cert)? type [^ ]+$', '')
           | unique
           | select('exists')
           | map('regex_replace', '$', '.pub')
           | select('exists')
           | map('quote')
           | map('regex_replace', '^', 'cat ')
           | join(';') }}
        { command -v ssh-keygen && which ssh-keygen; } >/dev/null &&
        { {{ debug_identity_files.stdout_lines
             | d([])
             | select('match', '^debug1: identity file .*$')
             | map('regex_replace', '^debug1: identity file |(-cert)? type [^ ]+$', '')
             | unique
             | select('exists')
             | map('regex_replace', '$', '.pub')
             | reject('exists')
             | map('regex_replace', '\.pub$', '')
             | map('quote')
             | map('regex_replace', '^', 'ssh-keygen -y -f ')
             | join(';') }}
        :; }
      } | { if { command -v uniq; which uniq; }>/dev/null; then uniq; else cat; fi; };
      exit 0
    when: item != ''
    raw: >
      cd;
      umask 077;
      mkdir -p .ssh;
      { command -v grep || which grep; } \
      && grep -F {{ item | quote }} .ssh/authorized_keys \
      && echo 'Already Installled' \
      && exit 0;
      echo {{ item | quote }} >> .ssh/authorized_keys
      || exit 1;
      { command -v restorecon || which restorecon; } \
      && restorecon -F .ssh .ssh/authorized_keys;
      exit 0
    changed_when: not (public_key_installed.stdout | search("Already Installled"))

  - name: at least one key installed
    assert:
      that: "public_key_installed.results | selectattr('changed', 'equalto', True) | list | length > 0"
      msg: "no key installed!"

  when: check_login_pubkey.rc != 0
